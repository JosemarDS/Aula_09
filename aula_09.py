# -*- coding: utf-8 -*-
"""Aula_09

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1owbyym9IFsna4o9D-S_sTtB7TD0GGl5-

DEF → É A PALAVRINHA QUE USAMOS PARA CRIAR UMA FUNÇÃO

DEF NOME DA FUNÇÃO:`
AÇÃO AQUI

Funções em Python são blocos de código reutilizáveis que realizam uma tarefa específica. Elas permitem que você encapsule um conjunto de instruções em um único nome e a execute quando necessário. Funções em Python têm várias finalidades, desde a organização de código até a reutilização de lógica.

Definindo uma função:

Você pode definir uma função em Python usando a palavra-chave `def`, seguida do nome da função e parênteses `()`. Os parâmetros (argumentos) da função, se houver, são listados entre os parênteses. A definição da função é seguida por um bloco de código indentado que define o comportamento da função.
"""

def saudacao(nome):
       """Esta função saúda o usuário pelo nome."""
       print(f"Olá, {nome}!")

saudacao("Pedro")

"""Chamando uma função:

Para chamar uma função, basta usar o nome da função seguido pelos parênteses contendo os argumentos, se houver. No exemplo acima, podemos chamar a função `saudacao` da seguinte forma:
"""

saudacao("Alice")  # Saída: Olá, Alice!

"""### Parâmetros e valores de retorno:

Funções podem ter parâmetros que aceitam argumentos para realizar operações. Elas também podem retornar valores usando a palavra-chave `return`. Aqui está um exemplo de função com parâmetros e valor de retorno:
"""

def soma(a, b):
    """Esta função retorna a soma de dois números."""
    resultado = a + b
    return resultado

"""Você pode chamar a função soma e atribuir seu resultado a uma variável:"""

resultado_soma = soma(5, 3)  # resultado_soma agora contém 8

"""### Escopo de variáveis:

Variáveis definidas dentro de uma função têm escopo local, o que significa que elas não são acessíveis fora da função. Variáveis definidas fora de uma função têm escopo global e são acessíveis em todo o código. No entanto, você pode acessar variáveis globais de dentro de uma função usando a palavra-chave `global`.

### Documentação de Funções:

É uma boa prática incluir uma string de documentação (docstring) na definição de uma função, explicando o que a função faz e como ela deve ser usada. A docstring é acessível usando a função `help()` ou consultando a documentação do código.
"""

def saudacao(nome):
    """Esta função saúda o usuário pelo nome."""
    print(f"Olá, {nome}!")

help(saudacao)  # Exibe a docstring da função

"""Esses são conceitos fundamentais sobre funções em Python. Elas são cruciais para a modularização e organização do código, tornando-o mais legível e reutilizável. Além disso, as funções são uma parte essencial da programação em Python e são usadas em todos os tipos de aplicativos."""



"""EXERCÍCIOS COM FUNÇÕES EM PYHON:

#1 CRIE UMA FUNÇÃO PARA SUBTRAIR UM NÚMERO
"""

def calculadora(x, y):
  print('subtracao = ', x - y)
calculadora(6, 3)



"""#2 CRIE UMA FUNÇÃO PARA SOMAR UM NÚMERO"""

def calculadora(x, y):
   print('soma = ', x + y)
calculadora(6, 3)

"""#3 CRIE UMA FUNÇÃO PARA DIVIDIR UM NÚEMRO

"""

def calculadora(x, y):
  print('divisao = ', x / y)
calculadora(6, 3)



"""#4 CRIE UMA FUNÇÃO PARA MULTIPLICAR DOIS NÚMEROS

"""

def calculadora(x, y):
  print('multiplicacao = ', x * y)
calculadora(6, 2)

"""#5 CRIE UMA CALCULADORA, ONDE O USUÁRIO POSSO ESCOLHER AS OPERAÇÕES

"""

def calculadora(x, y):
  escolha = input('digite um numero: ')
  if escolha == 1:
    print(x - y)
  elif escolha == 2:
    print(x + y)
  elif escolha ==3:
    print(x / y)
  elif escolha == 4:
    print(x * y)
calculadora(6, 3)